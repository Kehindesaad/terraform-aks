name: CI/CD Pipeline for Python App on Azure

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Azure Credentials
      run: |
        echo "Setting Azure environment variables"
        echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV

    # Step 2: Set up Azure CLI
    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 3: Initialize Terraform and apply the infrastructure only (ACR, AKS)
    - name: Initialize Terraform
      working-directory: ./terraform
      run: terraform init

    - name: Apply Terraform (Infrastructure Only)
      working-directory: ./terraform
      run: terraform apply -auto-approve 

    # Step 4: Build Docker image for Python app
    - name: Build image
      run: |
        docker build -t saadudeenregistry247.azurecr.io/python-app1:latest -f ./my-app/Dockerfile .

    # Step 5: Log in to Azure Container Registry (ACR)
    - name: ACR Login
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}

    # Step 6: Push Docker image to ACR
    - name: Push Docker Image
      run: docker push saadudeenregistry247.azurecr.io/python-app1:latest  

    # Step 7: Get External IP of the service (LoadBalancer service)
    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group aksRG --name aks-istio-cluster --overwrite-existing

    # - name: Verify Kubernetes Context
    #   run: kubectl config current-context
    - name: Deploy to AKS
      run: kubectl apply -f ./deployment.yaml  

 

    - name: Get External IP
      run: |
        sleep 30  # Wait for service IP to be provisioned
        # kubectl create namespace my-python-app || echo "Namespace already exists"
        kubectl get service python-app-service1